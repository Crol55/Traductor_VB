'Generated by the GOLD Parser Builder

Option Explicit On
Option Strict Off

Imports System.IO
Imports System.Windows.Forms


Module MyParser
    Private Parser As New GOLD.Parser

    Dim traductor As New Traductor
    Public Errores_ As New ArrayList
    Public txt_salida As String = ""
    Private tipo As String = Nothing
    Dim conta As Integer = 0

    Private Enum SymbolIndex
        [Eof] = 0                                 ' (EOF)
        [Error] = 1                               ' (Error)
        [Whitespace] = 2                          ' Whitespace
        [Minus] = 3                               ' '-'
        [Exclam] = 4                              ' '!'
        [Amp] = 5                                 ' '&'
        [Lparen] = 6                              ' '('
        [Rparen] = 7                              ' ')'
        [Times] = 8                               ' '*'
        [Comma] = 9                               ' ','
        [Dot] = 10                                ' '.'
        [Div] = 11                                ' '/'
        [Lbracket] = 12                           ' '['
        [Rbracket] = 13                           ' ']'
        [Plus] = 14                               ' '+'
        [Lt] = 15                                 ' '<'
        [Lteq] = 16                               ' '<='
        [Ltgt] = 17                               ' '<>'
        [Eq] = 18                                 ' '='
        [Gt] = 19                                 ' '>'
        [Gteq] = 20                               ' '>='
        [And] = 21                                ' And
        [As] = 22                                 ' As
        [Boolean] = 23                            ' Boolean
        [Byval] = 24                              ' ByVal
        [Cads] = 25                               ' cads
        [Case] = 26                               ' Case
        [Char] = 27                               ' Char
        [Console] = 28                            ' Console
        [Decimal] = 29                            ' decimal
        [Dim] = 30                                ' Dim
        [Do] = 31                                 ' Do
        [Double] = 32                             ' Double
        [Else] = 33                               ' Else
        [Elseif] = 34                             ' ElseIf
        [End] = 35                                ' End
        [Endmodule] = 36                          ' 'End Module'
        [Exit] = 37                               ' Exit
        [False] = 38                              ' False
        [For] = 39                                ' For
        [Function] = 40                           ' Function
        [Id] = 41                                 ' ID
        [If] = 42                                 ' If
        [Integer] = 43                            ' Integer
        [Long] = 44                               ' Long
        [Loop] = 45                               ' Loop
        [Main] = 46                               ' Main
        [Module] = 47                             ' Module
        [New] = 48                                ' new
        [Next] = 49                               ' Next
        [Not] = 50                                ' Not
        [Numeros] = 51                            ' numeros
        [Or] = 52                                 ' Or
        [Private] = 53                            ' Private
        [Public] = 54                             ' Public
        [Readline] = 55                           ' ReadLine
        [Return] = 56                             ' Return
        [Select] = 57                             ' Select
        [Static] = 58                             ' Static
        [Step] = 59                               ' Step
        [String] = 60                             ' String
        [Sub] = 61                                ' Sub
        [Then] = 62                               ' Then
        [To] = 63                                 ' To
        [True] = 64                               ' True
        [Until] = 65                              ' Until
        [While] = 66                              ' While
        [Writeline] = 67                          ' WriteLine
        [Acceso] = 68                             ' <ACCESO>
        [Arreglo] = 69                            ' <ARREGLO>
        [Asignacion] = 70                         ' <ASIGNACION>
        [Case2] = 71                              ' <CASE>
        [Compleja] = 72                           ' <COMPLEJA>
        [Condicion] = 73                          ' <CONDICION>
        [Condif] = 74                             ' <CONDIF>
        [Cuerpo] = 75                             ' <CUERPO>
        [Dec2] = 76                               ' <DEC2>
        [Declaracion] = 77                        ' <DECLARACION>
        [Decyasig] = 78                           ' <DECYASIG>
        [Dim2] = 79                               ' <DIM>
        [Dim22] = 80                              ' <DIM2>
        [Dowhile] = 81                            ' <DOWHILE>
        [E] = 82                                  ' <E>
        [Ef] = 83                                 ' <EF>
        [Else2] = 84                              ' <ELSE>
        [Elseif2] = 85                            ' <ElseIf>
        [Empty] = 86                              ' <Empty>
        [Expre] = 87                              ' <EXPRE>
        [For2] = 88                               ' <FOR>
        [Func] = 89                               ' <FUNC>
        [G] = 90                                  ' <G>
        [If2] = 91                                ' <IF>
        [Inicio] = 92                             ' <INICIO>
        [Instrucciones] = 93                      ' <INSTRUCCIONES>
        [Invocar] = 94                            ' <INVOCAR>
        [L] = 95                                  ' <L>
        [L_param] = 96                            ' <L_PARAM>
        [Lista_id] = 97                           ' <LISTA_ID>
        [Logico] = 98                             ' <LOGICO>
        [Main2] = 99                              ' <MAIN>
        [Mensaje] = 100                           ' <MENSAJE>
        [Metodo] = 101                            ' <METODO>
        [Normal] = 102                            ' <NORMAL>
        [Op] = 103                                ' <OP>
        [Param] = 104                             ' <PARAM>
        [Parametros] = 105                        ' <PARAMETROS>
        [Pmt] = 106                               ' <PMT>
        [Prod] = 107                              ' <PROD>
        [S] = 108                                 ' <S>
        [S1] = 109                                ' <S1>
        [Scontrol] = 110                          ' <SCONTROL>
        [Se] = 111                                ' <SE>
        [Se2] = 112                               ' <SE2>
        [Sec] = 113                               ' <SEC>
        [Si] = 114                                ' <Si>
        [Simb] = 115                              ' <SIMB>
        [Simb2] = 116                             ' <SIMB2>
        [Simple] = 117                            ' <SIMPLE>
        [Sl] = 118                                ' <SL>
        [String2] = 119                           ' <STRING>
        [Sub2] = 120                              ' <SUB>
        [Switch] = 121                            ' <SWITCH>
        [T] = 122                                 ' <T>
        [Tipod] = 123                             ' <TIPOD>
        [Val] = 124                               ' <VAL>
        [While2] = 125                            ' <WHILE>
    End Enum

    Private Enum ProductionIndex
        [Inicio_Module_Id_Endmodule] = 0          ' <INICIO> ::= Module ID <CUERPO> 'End Module'
        [Cuerpo] = 1                              ' <CUERPO> ::= <CUERPO> <DECYASIG>
        [Cuerpo2] = 2                             ' <CUERPO> ::= <CUERPO> <ARREGLO>
        [Cuerpo3] = 3                             ' <CUERPO> ::= <CUERPO> <METODO>
        [Cuerpo4] = 4                             ' <CUERPO> ::= <METODO>
        [Cuerpo5] = 5                             ' <CUERPO> ::= <ARREGLO>
        [Cuerpo6] = 6                             ' <CUERPO> ::= <DECYASIG>
        [Decyasig] = 7                            ' <DECYASIG> ::= <DECLARACION>
        [Decyasig2] = 8                           ' <DECYASIG> ::= <ASIGNACION>
        [Declaracion_As] = 9                      ' <DECLARACION> ::= <ACCESO> <LISTA_ID> As <TIPOD>
        [Declaracion] = 10                        ' <DECLARACION> ::= <DEC2>
        [Dec2_As_Eq] = 11                         ' <DEC2> ::= <ACCESO> <LISTA_ID> As <TIPOD> '=' <EXPRE>
        [Dec2_As_New_Eq] = 12                     ' <DEC2> ::= <ACCESO> <LISTA_ID> As new <TIPOD> '=' <EXPRE>
        [Dec2_As_New] = 13                        ' <DEC2> ::= <ACCESO> <LISTA_ID> As new <TIPOD>
        [Lista_id_Id] = 14                        ' <LISTA_ID> ::= ID <L>
        [Lista_id_Id2] = 15                       ' <LISTA_ID> ::= ID
        [L_Comma_Id] = 16                         ' <L> ::= <L> ',' ID
        [L_Comma_Id2] = 17                        ' <L> ::= ',' ID
        [Asignacion_Id_Eq] = 18                   ' <ASIGNACION> ::= ID '=' <EXPRE>
        [Arreglo_Id_Lbracket_Rbracket_As] = 19    ' <ARREGLO> ::= <ACCESO> ID '[' <DIM> ']' As <TIPOD>
        [Arreglo_Id_Lbracket_Rbracket_Eq] = 20    ' <ARREGLO> ::= ID '[' <DIM> ']' '=' <EXPRE>
        [Dim] = 21                                ' <DIM> ::= <PROD> <DIM2>
        [Dim2] = 22                               ' <DIM> ::= <PROD>
        [Dim2_Comma] = 23                         ' <DIM2> ::= <DIM2> ',' <PROD>
        [Dim2_Comma2] = 24                        ' <DIM2> ::= ',' <PROD>
        [Prod_Numeros] = 25                       ' <PROD> ::= numeros
        [Prod_Id] = 26                            ' <PROD> ::= ID
        [Metodo] = 27                             ' <METODO> ::= <SUB>
        [Metodo2] = 28                            ' <METODO> ::= <FUNC>
        [Sub] = 29                                ' <SUB> ::= <MAIN>
        [Sub2] = 30                               ' <SUB> ::= <NORMAL>
        [Func_Function_Id_Lparen_Rparen_As_Return_End_Function] = 31 ' <FUNC> ::= Function ID '(' ')' As <TIPOD> <EF> Return <EXPRE> End Function
        [Func_Function_Id_Lparen_Rparen_As_Return_End_Function2] = 32 ' <FUNC> ::= Function ID '(' <PARAM> ')' As <TIPOD> <EF> Return <EXPRE> End Function
        [Main_Sub_Main_Lparen_Rparen_End_Sub] = 33 ' <MAIN> ::= Sub Main '(' ')' <EF> End Sub
        [Normal_Sub_Id_Lparen_Rparen_End_Sub] = 34 ' <NORMAL> ::= Sub ID '(' <PARAM> ')' <EF> End Sub
        [Normal_Sub_Id_Lparen_Rparen_End_Sub2] = 35 ' <NORMAL> ::= Sub ID '(' ')' <EF> End Sub
        [Param_Byval_Id_As] = 36                  ' <PARAM> ::= ByVal ID As <TIPOD> <PMT>
        [Param_Byval_Id_As2] = 37                 ' <PARAM> ::= ByVal ID As <TIPOD>
        [Pmt_Comma_Byval_Id_As] = 38              ' <PMT> ::= <PMT> ',' ByVal ID As <TIPOD>
        [Pmt_Comma_Byval_Id_As2] = 39             ' <PMT> ::= ',' ByVal ID As <TIPOD>
        [Instrucciones] = 40                      ' <INSTRUCCIONES> ::= <INSTRUCCIONES> <SCONTROL>
        [Instrucciones2] = 41                     ' <INSTRUCCIONES> ::= <INSTRUCCIONES> <DECYASIG>
        [Instrucciones3] = 42                     ' <INSTRUCCIONES> ::= <INSTRUCCIONES> <ARREGLO>
        [Instrucciones4] = 43                     ' <INSTRUCCIONES> ::= <INSTRUCCIONES> <INVOCAR>
        [Instrucciones5] = 44                     ' <INSTRUCCIONES> ::= <INSTRUCCIONES> <MENSAJE>
        [Instrucciones_Exit_While] = 45           ' <INSTRUCCIONES> ::= <INSTRUCCIONES> Exit While
        [Instrucciones_Exit_For] = 46             ' <INSTRUCCIONES> ::= <INSTRUCCIONES> Exit For
        [Instrucciones6] = 47                     ' <INSTRUCCIONES> ::= <DECYASIG>
        [Instrucciones7] = 48                     ' <INSTRUCCIONES> ::= <ARREGLO>
        [Instrucciones8] = 49                     ' <INSTRUCCIONES> ::= <SCONTROL>
        [Instrucciones9] = 50                     ' <INSTRUCCIONES> ::= <INVOCAR>
        [Instrucciones10] = 51                    ' <INSTRUCCIONES> ::= <MENSAJE>
        [Instrucciones_Exit_While2] = 52          ' <INSTRUCCIONES> ::= Exit While
        [Instrucciones_Exit_For2] = 53            ' <INSTRUCCIONES> ::= Exit For
        [Mensaje_Console_Dot_Writeline_Lparen_Rparen] = 54 ' <MENSAJE> ::= Console '.' WriteLine '(' <SE> ')'
        [Mensaje_Console_Dot_Readline] = 55       ' <MENSAJE> ::= Console '.' ReadLine
        [Se] = 56                                 ' <SE> ::= <EXPRE> <SE2>
        [Se2] = 57                                ' <SE> ::= <EXPRE>
        [Se22] = 58                               ' <SE2> ::= <SE2> <Si> <EXPRE>
        [Se23] = 59                               ' <SE2> ::= <Si> <EXPRE>
        [Si_Comma] = 60                           ' <Si> ::= ','
        [Si_Amp] = 61                             ' <Si> ::= '&'
        [Scontrol] = 62                           ' <SCONTROL> ::= <IF>
        [Scontrol2] = 63                          ' <SCONTROL> ::= <WHILE>
        [Scontrol3] = 64                          ' <SCONTROL> ::= <FOR>
        [Scontrol4] = 65                          ' <SCONTROL> ::= <DOWHILE>
        [Scontrol5] = 66                          ' <SCONTROL> ::= <SWITCH>
        [If_If_Then_End_If] = 67                  ' <IF> ::= If <CONDICION> Then <INSTRUCCIONES> End If
        [If_If_Then_End_If2] = 68                 ' <IF> ::= If <CONDICION> Then End If
        [If_If_Then_End_If3] = 69                 ' <IF> ::= If <CONDICION> Then <ELSE> End If
        [If_If_Then_End_If4] = 70                 ' <IF> ::= If <CONDICION> Then <CONDIF> End If
        [If_If_Then_End_If5] = 71                 ' <IF> ::= If <CONDICION> Then <INSTRUCCIONES> <CONDIF> End If
        [If_If_Then_End_If6] = 72                 ' <IF> ::= If <CONDICION> Then <INSTRUCCIONES> <ELSE> End If
        [If_If_Then_End_If7] = 73                 ' <IF> ::= If <CONDICION> Then <CONDIF> <ELSE> End If
        [If_If_Then_End_If8] = 74                 ' <IF> ::= If <CONDICION> Then <INSTRUCCIONES> <CONDIF> <ELSE> End If
        [Condif] = 75                             ' <CONDIF> ::= <ElseIf>
        [Elseif_Elseif_Then] = 76                 ' <ElseIf> ::= <ElseIf> ElseIf <CONDICION> Then <EF>
        [Elseif_Elseif_Then2] = 77                ' <ElseIf> ::= ElseIf <CONDICION> Then <EF>
        [Else_Else] = 78                          ' <ELSE> ::= Else <EF>
        [While_While_End_While] = 79              ' <WHILE> ::= While <CONDICION> <EF> End While
        [For_For_Id_As_Integer_Eq_Numeros_To_Numeros_Step_Numeros_Next] = 80 ' <FOR> ::= For ID As Integer '=' <S> numeros To <S> numeros Step <S> numeros <EF> Next
        [S_Minus] = 81                            ' <S> ::= '-'
        [S] = 82                                  ' <S> ::= 
        [Dowhile_Do_Loop_Until] = 83              ' <DOWHILE> ::= Do <EF> Loop Until <CONDICION>
        [Switch_Select_Case_Id_End_Select] = 84   ' <SWITCH> ::= Select Case ID <CASE> End Select
        [Switch_Select_Case_Id_Case_Else_End_Select] = 85 ' <SWITCH> ::= Select Case ID <CASE> Case Else <EF> End Select
        [Case_Case] = 86                          ' <CASE> ::= <CASE> Case <VAL> <EF>
        [Case_Case2] = 87                         ' <CASE> ::= Case <VAL> <EF>
        [Val_Numeros] = 88                        ' <VAL> ::= numeros
        [Val_Cads] = 89                           ' <VAL> ::= cads
        [Condicion] = 90                          ' <CONDICION> ::= <SIMPLE> <SIMB2>
        [Condicion2] = 91                         ' <CONDICION> ::= <SIMPLE>
        [Condicion3] = 92                         ' <CONDICION> ::= <COMPLEJA>
        [Simple] = 93                             ' <SIMPLE> ::= <S1> <SIMB> <S1>
        [Simple2] = 94                            ' <SIMPLE> ::= <LOGICO>
        [Simple_Exclam] = 95                      ' <SIMPLE> ::= '!' <LOGICO>
        [Simb2] = 96                              ' <SIMB2> ::= <SIMB2> <SL> <SIMPLE>
        [Simb22] = 97                             ' <SIMB2> ::= <SL> <SIMPLE>
        [Compleja_Lparen_Rparen] = 98             ' <COMPLEJA> ::= '(' <CONDICION> ')'
        [Compleja_Exclam_Lparen_Rparen] = 99      ' <COMPLEJA> ::= '!' '(' <CONDICION> ')'
        [Compleja_Lparen_Rparen2] = 100           ' <COMPLEJA> ::= '(' <CONDICION> ')' <SL> <CONDICION>
        [Compleja_Exclam_Lparen_Rparen2] = 101    ' <COMPLEJA> ::= '!' '(' <CONDICION> ')' <SL> <CONDICION>
        [Sl_And] = 102                            ' <SL> ::= And
        [Sl_Or] = 103                             ' <SL> ::= Or
        [Sl_Not] = 104                            ' <SL> ::= Not
        [S1_Cads] = 105                           ' <S1> ::= cads
        [S1] = 106                                ' <S1> ::= <OP>
        [S12] = 107                               ' <S1> ::= <LOGICO>
        [Simb_Eq] = 108                           ' <SIMB> ::= '='
        [Simb_Ltgt] = 109                         ' <SIMB> ::= '<>'
        [Simb_Lteq] = 110                         ' <SIMB> ::= '<='
        [Simb_Gt] = 111                           ' <SIMB> ::= '>'
        [Simb_Gteq] = 112                         ' <SIMB> ::= '>='
        [Simb_Lt] = 113                           ' <SIMB> ::= '<'
        [Ef] = 114                                ' <EF> ::= <INSTRUCCIONES>
        [Ef2] = 115                               ' <EF> ::= <Empty>
        [Empty] = 116                             ' <Empty> ::= 
        [Expre] = 117                             ' <EXPRE> ::= <OP>
        [Expre2] = 118                            ' <EXPRE> ::= <LOGICO>
        [Expre_Id] = 119                          ' <EXPRE> ::= ID <STRING>
        [Expre_Cads] = 120                        ' <EXPRE> ::= cads <STRING>
        [Expre_Cads2] = 121                       ' <EXPRE> ::= cads
        [Expre_Console_Dot_Readline] = 122        ' <EXPRE> ::= Console '.' ReadLine
        [String_Amp_Cads] = 123                   ' <STRING> ::= <STRING> '&' cads
        [String_Amp_Id] = 124                     ' <STRING> ::= <STRING> '&' ID
        [String_Amp_Cads2] = 125                  ' <STRING> ::= '&' cads
        [String_Amp_Id2] = 126                    ' <STRING> ::= '&' ID
        [Op] = 127                                ' <OP> ::= <E>
        [E_Plus] = 128                            ' <E> ::= <E> '+' <T>
        [E_Minus] = 129                           ' <E> ::= <E> '-' <T>
        [E] = 130                                 ' <E> ::= <T>
        [T_Times] = 131                           ' <T> ::= <T> '*' <G>
        [T_Div] = 132                             ' <T> ::= <T> '/' <G>
        [T] = 133                                 ' <T> ::= <G>
        [G_Numeros] = 134                         ' <G> ::= numeros
        [G_Decimal] = 135                         ' <G> ::= decimal
        [G_Lparen_Rparen] = 136                   ' <G> ::= '(' <E> ')'
        [G] = 137                                 ' <G> ::= <INVOCAR>
        [G_Id_Lbracket_Rbracket] = 138            ' <G> ::= ID '[' <DIM> ']'
        [G_Id] = 139                              ' <G> ::= ID
        [Invocar_Id_Lparen_Rparen] = 140          ' <INVOCAR> ::= ID '(' <PARAMETROS> ')'
        [Invocar_Id_Lparen_Rparen2] = 141         ' <INVOCAR> ::= ID '(' ')'
        [Parametros] = 142                        ' <PARAMETROS> ::= <L_PARAM>
        [L_param] = 143                           ' <L_PARAM> ::= <LOGICO>
        [L_param2] = 144                          ' <L_PARAM> ::= <OP>
        [L_param3] = 145                          ' <L_PARAM> ::= <LOGICO> <SEC>
        [L_param4] = 146                          ' <L_PARAM> ::= <OP> <SEC>
        [Sec_Comma] = 147                         ' <SEC> ::= <SEC> ',' <LOGICO>
        [Sec_Comma2] = 148                        ' <SEC> ::= <SEC> ',' <OP>
        [Sec_Comma3] = 149                        ' <SEC> ::= ',' <OP>
        [Sec_Comma4] = 150                        ' <SEC> ::= ',' <LOGICO>
        [Logico_True] = 151                       ' <LOGICO> ::= True
        [Logico_False] = 152                      ' <LOGICO> ::= False
        [Acceso_Public] = 153                     ' <ACCESO> ::= Public
        [Acceso_Private] = 154                    ' <ACCESO> ::= Private
        [Acceso_Dim] = 155                        ' <ACCESO> ::= Dim
        [Acceso_Static] = 156                     ' <ACCESO> ::= Static
        [Tipod_Boolean] = 157                     ' <TIPOD> ::= Boolean
        [Tipod_Char] = 158                        ' <TIPOD> ::= Char
        [Tipod_Double] = 159                      ' <TIPOD> ::= Double
        [Tipod_Integer] = 160                     ' <TIPOD> ::= Integer
        [Tipod_Long] = 161                        ' <TIPOD> ::= Long
        [Tipod_String] = 162                      ' <TIPOD> ::= String
    End Enum

    Public Program As Object     'You might derive a specific object

    Public Sub Setup()
        'This procedure can be called to load the parse tables. The class can
        'read tables using a BinaryReader.

        Parser.LoadTables(Path.Combine(Application.StartupPath, "Gramatica_Final.egt"))
    End Sub
    
    Public Function Parse(ByVal Reader As TextReader) As Boolean
        'This procedure starts the GOLD Parser Engine and handles each of the
        'messages it returns. Each time a reduction is made, you can create new
        'custom object and reassign the .CurrentReduction property. Otherwise, 
        'the system will use the Reduction object that was returned.
        '
        'The resulting tree will be a pure representation of the language 
        'and will be ready to implement.

        Dim Response As GOLD.ParseMessage
        Dim Done as Boolean                  'Controls when we leave the loop
        Dim Accepted As Boolean = False      'Was the parse successful?

        txt_salida = Nothing
        tipo = Nothing
        conta = 0

        Accepted = False    'Unless the program is accepted by the parser

        Parser.Open(Reader)
        Parser.TrimReductions = False  'Please read about this feature before enabling  

        Done = False
        Do Until Done
            Response = Parser.Parse()

            Select Case Response
                Case GOLD.ParseMessage.LexicalError
                    Dim msg As String = ""
                    msg = Parser.CurrentPosition().Line.ToString() + "&" + Parser.CurrentPosition().Column.ToString() + "&" + "Error Lexico" + "&" + Parser.CurrentToken.Data.ToString() + "&" + Parser.ExpectedSymbols().Text().ToString()
                    Errores_.Add(msg)
                    MessageBox.Show(msg)

                    Done = True


                Case GOLD.ParseMessage.SyntaxError
                    'Expecting a different token
                    Dim msg As String
                    msg = Parser.CurrentPosition().Line.ToString() + "&" + Parser.CurrentPosition().Column.ToString() + "&" + "Error Sintactico" + "&" + Parser.CurrentToken.Parent.ToString() + "&" + Parser.ExpectedSymbols().Text().ToString()
                    Errores_.Add(msg)
                    MessageBox.Show(msg)
                    Done = True

                Case GOLD.ParseMessage.Reduction
                    'Create a customized object to store the reduction
                    Parser.CurrentReduction = CreateNewObject(Parser.CurrentReduction)

                Case GOLD.ParseMessage.Accept
                    'Accepted!
                    Program = Parser.CurrentReduction  'The root node!                 
                    Done = True
                    Accepted = True

                Case GOLD.ParseMessage.TokenRead
                    'You don't have to do anything here.
                   ' MessageBox.Show("token leido " + Parser.CurrentToken.Parent.ToString() + " " + Parser.CurrentPosition().Line.ToString())


                Case GOLD.ParseMessage.InternalError
                    'INTERNAL ERROR! Something is horribly wrong.
                    Done = True

                Case GOLD.ParseMessage.NotLoadedError
                    'This error occurs if the CGT was not loaded.                   
                    Done = True

                Case GOLD.ParseMessage.GroupError 
                    'COMMENT ERROR! Unexpected end of file
                    Done = True
            End Select
        Loop

        Return Accepted
    End Function

    Private Function CreateNewObject(Reduction as GOLD.Reduction) As Object
        Dim Result As Object = Nothing

        Dim cad As String = Nothing
        Dim salto As String = Environment.NewLine

        With Reduction
            Select Case .Parent.TableIndex                        
                Case ProductionIndex.Inicio_Module_Id_Endmodule
                    ' <INICIO> ::= Module ID <CUERPO> 'End Module' 
                    Dim sc As String = "static Scanner sc = new Scanner(System.in);" + salto
                    txt_salida = "import java.util.Scanner;" + salto + "public " + "class " + .Item(1).Data + "{" + salto + sc + .Item(2).Data + salto + "}"
                    Dim exe As New ejecutar
                    exe.GenerarFile_Java(txt_salida, .Item(1).Data)
                    exe.Ejecutar_Instrucciones(.Item(1).Data.ToString())

                Case ProductionIndex.Cuerpo
                    ' <CUERPO> ::= <CUERPO> <DECYASIG> 

                    Return .Item(0).Data + .Item(1).Data

                Case ProductionIndex.Cuerpo2
                    ' <CUERPO> ::= <CUERPO> <ARREGLO> 

                    Return .Item(0).Data + .Item(1).Data

                Case ProductionIndex.Cuerpo3
                    ' <CUERPO> ::= <CUERPO> <METODO> 

                    Return .Item(0).Data + .Item(1).Data

                Case ProductionIndex.Cuerpo4
                    ' <CUERPO> ::= <METODO> 
                    Return .Item(0).Data

                Case ProductionIndex.Cuerpo5
                    ' <CUERPO> ::= <ARREGLO> 
                    Return .Item(0).Data

                Case ProductionIndex.Cuerpo6
                    ' <CUERPO> ::= <DECYASIG> 
                    Return .Item(0).Data

                Case ProductionIndex.Decyasig
                    ' <DECYASIG> ::= <DECLARACION> 
                    Return .Item(0).Data

                Case ProductionIndex.Decyasig2
                    ' <DECYASIG> ::= <ASIGNACION> 

                    Return .Item(0).Data.ToString()

                Case ProductionIndex.Declaracion_As
                    ' <DECLARACION> ::= <ACCESO> <LISTA_ID> As <TIPOD> 

                    Return .Item(0).Data + " " + .Item(3).Data + " " + .Item(1).Data + ";" + salto

                Case ProductionIndex.Declaracion
                    ' <DECLARACION> ::= <DEC2> 
                    Return .Item(0).Data

                Case ProductionIndex.Dec2_As_Eq
                    ' <DEC2> ::= <ACCESO> <LISTA_ID> As <TIPOD> '=' <EXPRE> 
                    tipo = .Item(3).Data
                    Return .Item(0).Data + " " + .Item(3).Data + " " + .Item(1).Data + "=" + .Item(5).Data + ";" + salto


                Case ProductionIndex.Dec2_As_New_Eq
                    ' <DEC2> ::= <ACCESO> <LISTA_ID> As new <TIPOD> '=' <EXPRE> 
                    tipo = .Item(4).Data
                    Return .Item(0).Data + " " + .Item(4).Data + " " + .Item(1).Data + "=" + "new" + .Item(4).Data + "(" + .Item(6).Data + ");" + salto


                Case ProductionIndex.Dec2_As_New
                    ' <DEC2> ::= <ACCESO> <LISTA_ID> As new <TIPOD> 

                    Return .Item(0).Data + " " + .Item(4).Data + "new" + .Item(4).Data + ";" + salto

                Case ProductionIndex.Lista_id_Id
                    ' <LISTA_ID> ::= ID <L> 
                    Return .Item(0).Data + .Item(1).Data

                Case ProductionIndex.Lista_id_Id2
                    ' <LISTA_ID> ::= ID 
                    Return .Item(0).Data

                Case ProductionIndex.L_Comma_Id
                    ' <L> ::= <L> ',' ID 
                    Return .Item(0).Data + "," + .Item(2).Data

                Case ProductionIndex.L_Comma_Id2
                    ' <L> ::= ',' ID 
                    Return "," + .Item(1).Data

                Case ProductionIndex.Asignacion_Id_Eq
                    ' <ASIGNACION> ::= ID '=' <EXPRE> 

                    Return .Item(0).Data + "=" + .Item(2).Data + ";" + salto

                Case ProductionIndex.Arreglo_Id_Lbracket_Rbracket_As
                    ' <ARREGLO> ::= <ACCESO> ID '[' <DIM> ']' As <TIPOD> 
                    '  cad += .Item(0).Data + .Item(1).Data + " " + .Item(6).Data + " " + traductor.Generar_corchete(conta) + "=" + "new " + .Item(6).Data + .Item(3).Data + ";" + salto
                    Return .Item(0).Data + " " + .Item(6).Data + " " + .Item(1).Data + " " + traductor.Generar_corchete(conta) + "=" + "new " + .Item(6).Data + .Item(3).Data + ";" + salto


                Case ProductionIndex.Arreglo_Id_Lbracket_Rbracket_Eq
                    ' <ARREGLO> ::= ID '[' <DIM> ']' '=' <EXPRE> 


                    Return .Item(0).Data + .Item(2).Data + "=" + .Item(5).Data + ";" + salto


                Case ProductionIndex.Dim
                    ' <DIM> ::= <PROD> <DIM2> 
                    Return .Item(0).Data + .Item(1).Data

                Case ProductionIndex.Dim2
                    ' <DIM> ::= <PROD> 
                    Return .Item(0).Data

                Case ProductionIndex.Dim2_Comma
                    ' <DIM2> ::= <DIM2> ',' <PROD> 
                    Return .Item(0).Data + .Item(2).Data

                Case ProductionIndex.Dim2_Comma2
                    ' <DIM2> ::= ',' <PROD> 
                    Return .Item(1).Data

                Case ProductionIndex.Prod_Numeros
                    ' <PROD> ::= numeros 
                    conta = conta + 1
                    Return "[" + .Item(0).Data + "]"

                Case ProductionIndex.Prod_Id
                    ' <PROD> ::= ID 
                    conta = conta + 1
                    Return "[" + .Item(0).Data + "]"


                Case ProductionIndex.Metodo
                    ' <METODO> ::= <SUB> 
                    Return .Item(0).Data

                Case ProductionIndex.Metodo2
                    ' <METODO> ::= <FUNC> 
                    Return .Item(0).Data

                Case ProductionIndex.Sub
                    ' <SUB> ::= <MAIN> 
                    Return .Item(0).Data

                Case ProductionIndex.Sub2
                    ' <SUB> ::= <NORMAL> 
                    Return .Item(0).Data

                Case ProductionIndex.Func_Function_Id_Lparen_Rparen_As_Return_End_Function
                    ' <FUNC> ::= Function ID '(' ')' As <TIPOD> <EF> Return <EXPRE> End Function 
                    ' cad += "public " + .Item(5).Data + " " + .Item(1).Data + "(" + "){" + salto + .Item(6).Data + "return " + .Item(8).Data +salto+ "}" + salto
                    Return "public static " + .Item(5).Data + " " + .Item(1).Data + "(" + "){" + salto + .Item(6).Data + "return " + .Item(8).Data + ";" + salto + "}" + salto


                Case ProductionIndex.Func_Function_Id_Lparen_Rparen_As_Return_End_Function2
                    ' <FUNC> ::= Function ID '(' <PARAM> ')' As <TIPOD> <EF> Return <EXPRE> End Function 
                    ' cad += "public " + .Item(6).Data + " " + .Item(1).Data + "(" + .Item(3).Data + "){" + salto + .Item(7).Data + "return " + .Item(9).Data + salto + "}" + salto
                    Return "public static " + .Item(6).Data + " " + .Item(1).Data + "(" + .Item(3).Data + "){" + salto + .Item(7).Data + "return " + .Item(9).Data + ";" + salto + "}" + salto


                Case ProductionIndex.Main_Sub_Main_Lparen_Rparen_End_Sub
                    ' <MAIN> ::= Sub Main '(' ')' <EF> End Sub 
                    Return "public static void main(String[] Args){" + salto + .Item(4).Data + "}" + salto

                Case ProductionIndex.Normal_Sub_Id_Lparen_Rparen_End_Sub
                    ' <NORMAL> ::= Sub ID '(' <PARAM> ')' <EF> End Sub 
                    '   cad += "public void " + .Item(1).Data + " (" + .Item(3).Data + ")" + "{" + salto + .Item(5).Data + "}" + salto
                    Return "public static void " + .Item(1).Data + " (" + .Item(3).Data + ")" + "{" + salto + .Item(5).Data + "}" + salto


                Case ProductionIndex.Normal_Sub_Id_Lparen_Rparen_End_Sub2
                    ' <NORMAL> ::= Sub ID '(' ')' <EF> End Sub 
                    '  cad += "public void " + .Item(1).Data + "(" + "){" + salto + .Item(4).Data + "}" + salto
                    Return "public static void " + .Item(1).Data + "(" + "){" + salto + .Item(4).Data + "}" + salto

                Case ProductionIndex.Param_Byval_Id_As
                    ' <PARAM> ::= ByVal ID As <TIPOD> <PMT> 
                    Return .Item(3).Data + " " + .Item(1).Data + .Item(4).Data

                Case ProductionIndex.Param_Byval_Id_As2
                    ' <PARAM> ::= ByVal ID As <TIPOD> 
                    Return .Item(3).Data + " " + .Item(1).Data

                Case ProductionIndex.Pmt_Comma_Byval_Id_As
                    ' <PMT> ::= <PMT> ',' ByVal ID As <TIPOD> 
                    Return .Item(0).Data + "," + .Item(5).Data + " " + .Item(3).Data

                Case ProductionIndex.Pmt_Comma_Byval_Id_As2
                    ' <PMT> ::= ',' ByVal ID As <TIPOD> 
                    Return "," + .Item(4).Data + " " + .Item(2).Data

                Case ProductionIndex.Instrucciones
                    ' <INSTRUCCIONES> ::= <INSTRUCCIONES> <SCONTROL> 
                    Return .Item(0).Data + " " + .Item(1).Data

                Case ProductionIndex.Instrucciones2
                    ' <INSTRUCCIONES> ::= <INSTRUCCIONES> <DECYASIG> 
                    Return .Item(0).Data + " " + .Item(1).Data

                Case ProductionIndex.Instrucciones3
                    ' <INSTRUCCIONES> ::= <INSTRUCCIONES> <ARREGLO> 
                    Return .Item(0).Data + " " + .Item(1).Data

                Case ProductionIndex.Instrucciones4
                    ' <INSTRUCCIONES> ::= <INSTRUCCIONES> <INVOCAR> 
                    Return .Item(0).Data + " " + .Item(1).Data + ";" + salto

                Case ProductionIndex.Instrucciones5
                    ' <INSTRUCCIONES> ::= <INSTRUCCIONES> <MENSAJE> 
                    Return .Item(0).Data + " " + .Item(1).Data

                Case ProductionIndex.Instrucciones_Exit_While
                    ' <INSTRUCCIONES> ::= <INSTRUCCIONES> Exit While 
                    Return .Item(0).Data + " " + "break"

                Case ProductionIndex.Instrucciones_Exit_For
                    ' <INSTRUCCIONES> ::= <INSTRUCCIONES> Exit For 
                    Return .Item(0).Data + " " + "break"

                Case ProductionIndex.Instrucciones6
                    ' <INSTRUCCIONES> ::= <DECYASIG> 
                    Return .Item(0).Data

                Case ProductionIndex.Instrucciones7
                    ' <INSTRUCCIONES> ::= <ARREGLO> 
                    Return .Item(0).Data

                Case ProductionIndex.Instrucciones8
                    ' <INSTRUCCIONES> ::= <SCONTROL> 
                    Return .Item(0).Data

                Case ProductionIndex.Instrucciones9
                    ' <INSTRUCCIONES> ::= <INVOCAR> 
                    Return .Item(0).Data + ";" + salto

                Case ProductionIndex.Instrucciones10
                    ' <INSTRUCCIONES> ::= <MENSAJE> 
                    Return .Item(0).Data

                Case ProductionIndex.Instrucciones_Exit_While2
                    ' <INSTRUCCIONES> ::= Exit While 
                    Return "break;" + salto

                Case ProductionIndex.Instrucciones_Exit_For2
                    ' <INSTRUCCIONES> ::= Exit For 
                    Return "break;" + salto

                Case ProductionIndex.Mensaje_Console_Dot_Writeline_Lparen_Rparen
                    ' <MENSAJE> ::= Console '.' WriteLine '(' <SE> ')' 
                    Return "System.out.println(" + .Item(4).Data + ") ;" + salto

                Case ProductionIndex.Mensaje_Console_Dot_Readline
                    ' <MENSAJE> ::= Console '.' ReadLine 
                    Dim str As String = ""
                    tipo = "int"
                    If tipo.Equals("int") Then
                        str = "sc.nextInt()"
                    Else 'contendra string
                        str = "sc.nextInt()"
                    End If
                    tipo = "" ' reiniciamos la variable para un nuevo uso
                    Return str

                Case ProductionIndex.Se
                    ' <SE> ::= <EXPRE> <SE2> 
                    Return .Item(0).Data + .Item(1).Data

                Case ProductionIndex.Se2
                    ' <SE> ::= <EXPRE> 
                    Return .Item(0).Data

                Case ProductionIndex.Se22
                    ' <SE2> ::= <SE2> <Si> <EXPRE> 
                    Return .Item(0).Data + .Item(1).Data + .Item(2).Data

                Case ProductionIndex.Se23
                    ' <SE2> ::= <Si> <EXPRE> 
                    Return .Item(0).Data + .Item(1).Data

                Case ProductionIndex.Si_Comma
                    ' <Si> ::= ',' 
                    Return .Item(0).Data

                Case ProductionIndex.Si_Amp
                    ' <Si> ::= '&' 
                    Return "+"

                Case ProductionIndex.Scontrol
                    ' <SCONTROL> ::= <IF> 
                    Return .Item(0).Data

                Case ProductionIndex.Scontrol2
                    ' <SCONTROL> ::= <WHILE> 
                    Return .Item(0).Data

                Case ProductionIndex.Scontrol3
                    ' <SCONTROL> ::= <FOR> 
                    'MessageBox.Show("jijii   " + .Item(0).Data.ToString())
                    Return .Item(0).Data

                Case ProductionIndex.Scontrol4
                    ' <SCONTROL> ::= <DOWHILE> 
                    Return .Item(0).Data

                Case ProductionIndex.Scontrol5
                    ' <SCONTROL> ::= <SWITCH> 
                    Return .Item(0).Data

                Case ProductionIndex.If_If_Then_End_If
                    ' <IF> ::= If <CONDICION> Then <INSTRUCCIONES> End If 
                    Return "if(" + .Item(1).Data + ")" + "{" + salto + .Item(3).Data + "}" + salto

                Case ProductionIndex.If_If_Then_End_If2
                    ' <IF> ::= If <CONDICION> Then End If 
                    Return "if(" + .Item(1).Data + ")" + "{" + salto + "}" + salto

                Case ProductionIndex.If_If_Then_End_If3
                    ' <IF> ::= If <CONDICION> Then <ELSE> End If 
                    Return "if(" + .Item(1).Data + ")" + "{" + salto + "}" + .Item(3).Data + salto

                Case ProductionIndex.If_If_Then_End_If4
                    ' <IF> ::= If <CONDICION> Then <CONDIF> End If 
                    Return "if(" + .Item(1).Data + ")" + "{" + salto + .Item(3).Data + "}" + salto

                Case ProductionIndex.If_If_Then_End_If5
                    ' <IF> ::= If <CONDICION> Then <INSTRUCCIONES> <CONDIF> End If 
                    Return "if(" + .Item(1).Data + ")" + "{" + salto + .Item(3).Data + .Item(3).Data + "}" + salto

                Case ProductionIndex.If_If_Then_End_If6
                    ' <IF> ::= If <CONDICION> Then <INSTRUCCIONES> <ELSE> End If 
                    Return "if(" + .Item(1).Data + ")" + "{" + salto + .Item(3).Data + "}" + .Item(4).Data + salto

                Case ProductionIndex.If_If_Then_End_If7
                    ' <IF> ::= If <CONDICION> Then <CONDIF> <ELSE> End If 
                    Return "if (" + .Item(1).Data + ")" + "{" + salto + .Item(3).Data + "}" + .Item(4).Data + salto

                Case ProductionIndex.If_If_Then_End_If8
                    ' <IF> ::= If <CONDICION> Then <INSTRUCCIONES> <CONDIF> <ELSE> End If 
                    Return "if(" + .Item(1).Data + ")" + "{" + salto + .Item(3).Data + .Item(4).Data + "}" + .Item(5).Data + salto

                Case ProductionIndex.Condif
                    ' <CONDIF> ::= <ElseIf> 
                    Return .Item(0).Data

                Case ProductionIndex.Elseif_Elseif_Then
                    ' <ElseIf> ::= <ElseIf> ElseIf <CONDICION> Then <EF> 
                    Return .Item(0).Data + "else if (" + .Item(2).Data + ")" + "{" + salto + .Item(4).Data + "}" + salto

                Case ProductionIndex.Elseif_Elseif_Then2
                    ' <ElseIf> ::= ElseIf <CONDICION> Then <EF> 
                    Return "else if(" + .Item(1).Data + ")" + "{" + salto + .Item(3).Data + "}" + salto

                Case ProductionIndex.Else_Else
                    ' <ELSE> ::= Else <EF> 
                    Return "else " + "{" + salto + .Item(1).Data + "}" + salto

                Case ProductionIndex.While_While_End_While
                    ' <WHILE> ::= While <CONDICION> <EF> End While 
                    Return "while (" + .Item(1).Data + ")" + "{" + salto + .Item(2).Data + "}" + salto

                Case ProductionIndex.For_For_Id_As_Integer_Eq_Numeros_To_Numeros_Step_Numeros_Next
                    ' <FOR> ::= For ID As Integer '=' <S> numeros To <S> numeros Step <S> numeros <EF> Next
                    Dim condicional As String = ""

                    condicional = traductor.Condicional_For(Int32.Parse(.Item(5).Data + .Item(6).Data), Int32.Parse(.Item(8).Data + .Item(9).Data), (.Item(1).Data), .Item(11).Data, .Item(12).Data)
                    Return "for (int " + .Item(1).Data + "=" + .Item(5).Data + .Item(6).Data + ";" + condicional + ")" + "{" + salto + .Item(13).Data + "}" + salto

                Case ProductionIndex.S_Minus
                    ' <S> ::= '-' 
                    Return .Item(0).Data

                Case ProductionIndex.S
                    ' <S> ::=  
                    Return ""

                Case ProductionIndex.Dowhile_Do_Loop_Until
                    ' <DOWHILE> ::= Do <EF> Loop Until <CONDICION> 
                    Return "do{" + salto + .Item(1).Data + "}" + "while" + "(" + .Item(4).Data + ");" + salto

                Case ProductionIndex.Switch_Select_Case_Id_End_Select
                    ' <SWITCH> ::= Select Case ID <CASE> End Select 
                    Return "switch(" + .Item(2).Data + ")" + "{" + salto + .Item(3).Data + "}" + salto

                Case ProductionIndex.Switch_Select_Case_Id_Case_Else_End_Select
                    ' <SWITCH> ::= Select Case ID <CASE> Case Else <EF> End Select 
                    Return "switch(" + .Item(2).Data + ")" + "{" + salto + .Item(3).Data + "default:" + .Item(6).Data + "}" + salto '+ "}" + salto

                Case ProductionIndex.Case_Case
                    ' <CASE> ::= <CASE> Case <VAL> <EF> 
                    Return .Item(0).Data + "case " + .Item(2).Data + ":" + salto + .Item(3).Data + "break;" + salto

                Case ProductionIndex.Case_Case2
                    ' <CASE> ::= Case <VAL> <EF> 
                    Return "case " + .Item(1).Data + ":" + salto + .Item(2).Data + "break;" + salto

                Case ProductionIndex.Val_Numeros
                    ' <VAL> ::= numeros 
                    Return .Item(0).Data

                Case ProductionIndex.Val_Cads
                    ' <VAL> ::= cads 
                    Return .Item(0).Data

                Case ProductionIndex.Condicion
                    ' <CONDICION> ::= <SIMPLE> <SIMB2> 
                    Return .Item(0).Data + .Item(1).Data

                Case ProductionIndex.Condicion2
                    ' <CONDICION> ::= <SIMPLE> 
                    Return .Item(0).Data

                Case ProductionIndex.Condicion3
                    ' <CONDICION> ::= <COMPLEJA> 
                    Return .Item(0).Data

                Case ProductionIndex.Simple
                    ' <SIMPLE> ::= <S1> <SIMB> <S1> 
                    Return .Item(0).Data + .Item(1).Data + .Item(2).Data

                Case ProductionIndex.Simple2
                    ' <SIMPLE> ::= <LOGICO> 
                    Return .Item(0).Data

                Case ProductionIndex.Simple_Exclam
                    ' <SIMPLE> ::= '!' <LOGICO>
                    Return "!" + .Item(1).Data

                Case ProductionIndex.Simb2
                    ' <SIMB2> ::= <SIMB2> <SL> <SIMPLE> 
                    Return .Item(0).Data + .Item(1).Data + .Item(2).Data

                Case ProductionIndex.Simb22
                    ' <SIMB2> ::= <SL> <SIMPLE> 
                    Return .Item(0).Data + .Item(1).Data

                Case ProductionIndex.Compleja_Lparen_Rparen
                    ' <COMPLEJA> ::= '(' <CONDICION> ')' 
                    Return "(" + .Item(1).Data + ")"

                Case ProductionIndex.Compleja_Exclam_Lparen_Rparen
                    ' <COMPLEJA> ::= '!' '(' <CONDICION> ')' 
                    Return "!(" + .Item(2).Data + ")"

                Case ProductionIndex.Compleja_Lparen_Rparen2
                    ' <COMPLEJA> ::= '(' <CONDICION> ')' <SL> <CONDICION> 
                    Return "(" + .Item(1).Data + ")" + .Item(3).Data + .Item(4).Data

                Case ProductionIndex.Compleja_Exclam_Lparen_Rparen2
                    ' <COMPLEJA> ::= '!' '(' <CONDICION> ')' <SL> <CONDICION> 
                    Return "!(" + .Item(2).Data + ")" + .Item(4).Data + .Item(5).Data

                Case ProductionIndex.Sl_And
                    ' <SL> ::= And 
                    Return "&&"

                Case ProductionIndex.Sl_Or
                    ' <SL> ::= Or 
                    Return "||"

                Case ProductionIndex.Sl_Not
                    ' <SL> ::= Not 
                    Return "!"

                Case ProductionIndex.S1_Cads
                    ' <S1> ::= cads 
                    Return .Item(0).Data

                Case ProductionIndex.S1
                    ' <S1> ::= <OP> 
                    Return .Item(0).Data

                Case ProductionIndex.S12
                    ' <S1> ::= <LOGICO> 
                    Return .Item(0).Data

                Case ProductionIndex.Simb_Eq
                    ' <SIMB> ::= '=' 
                    Return "=="

                Case ProductionIndex.Simb_Ltgt
                    ' <SIMB> ::= '<>'
                    Return "!="

                Case ProductionIndex.Simb_Lteq
                    ' <SIMB> ::= '<=' 
                    Return .Item(0).Data

                Case ProductionIndex.Simb_Gt
                    ' <SIMB> ::= '>' 
                    Return .Item(0).Data

                Case ProductionIndex.Simb_Gteq
                    ' <SIMB> ::= '>=' 
                    Return .Item(0).Data

                Case ProductionIndex.Simb_Lt
                    ' <SIMB> ::= '<' 
                    Return .Item(0).Data

                Case ProductionIndex.Ef
                    ' <EF> ::= <INSTRUCCIONES> 
                    Return .Item(0).Data

                Case ProductionIndex.Ef2
                    ' <EF> ::= <Empty> 
                    Return "" + salto

                Case ProductionIndex.Empty                 
                    ' <Empty> ::=  

                Case ProductionIndex.Expre
                    ' <EXPRE> ::= <OP> 
                    Return .Item(0).Data

                Case ProductionIndex.Expre2
                    ' <EXPRE> ::= <LOGICO> 
                    Return .Item(0).Data

                Case ProductionIndex.Expre_Id
                    ' <EXPRE> ::= ID <STRING> 
                    Return .Item(0).Data + .Item(1).Data

                Case ProductionIndex.Expre_Cads
                    ' <EXPRE> ::= cads <STRING> 
                    Return .Item(0).Data + .Item(1).Data

                Case ProductionIndex.Expre_Cads2
                    ' <EXPRE> ::= cads 
                    Return .Item(0).Data

                Case ProductionIndex.Expre_Console_Dot_Readline
                    ' <EXPRE> ::= Console '.' ReadLine 
                    Dim str As String = ""
                    tipo = "int"
                    If tipo.Equals("int") Then
                        str = "sc.nextInt()"
                    Else 'contendra string
                        str = "sc.nextInt()"
                    End If
                    tipo = "" ' reiniciamos la variable para un nuevo uso
                    Return str

                Case ProductionIndex.String_Amp_Cads
                    ' <STRING> ::= <STRING> '&' cads 
                    Return .Item(0).Data + "+" + .Item(2).Data

                Case ProductionIndex.String_Amp_Id
                    ' <STRING> ::= <STRING> '&' ID 
                    Return .Item(0).Data + "+" + .Item(2).Data

                Case ProductionIndex.String_Amp_Cads2
                    ' <STRING> ::= '&' cads 
                    Return "+" + .Item(1).Data

                Case ProductionIndex.String_Amp_Id2
                    ' <STRING> ::= '&' ID 
                    Return "+" + .Item(1).Data

                Case ProductionIndex.Op
                    ' <OP> ::= <E> 
                    Return .Item(0).Data
                Case ProductionIndex.E_Plus
                    ' <E> ::= <E> '+' <T> 
                    Return .Item(0).Data + "+" + .Item(2).Data

                Case ProductionIndex.E_Minus
                    ' <E> ::= <E> '-' <T> 
                    Return .Item(0).Data + "-" + .Item(2).Data

                Case ProductionIndex.E
                    ' <E> ::= <T> 
                    Return .Item(0).Data
                Case ProductionIndex.T_Times
                    ' <T> ::= <T> '*' <G> 
                    Return .Item(0).Data + "*" + .Item(2).Data
                Case ProductionIndex.T_Div
                    ' <T> ::= <T> '/' <G> 
                    Return .Item(0).Data + "/" + .Item(2).Data

                Case ProductionIndex.T
                    ' <T> ::= <G> 
                    Return .Item(0).Data
                Case ProductionIndex.G_Numeros
                    ' <G> ::= numeros 
                    Return .Item(0).Data
                Case ProductionIndex.G_Decimal
                    ' <G> ::= decimal 
                    Return .Item(0).Data
                Case ProductionIndex.G_Lparen_Rparen
                    ' <G> ::= '(' <E> ')' 
                    Return "(" + .Item(1).Data + ")"
                Case ProductionIndex.G
                    ' <G> ::= <INVOCAR> 
                    Return .Item(0).Data

                Case ProductionIndex.G_Id_Lbracket_Rbracket
                    ' <G> ::= ID '[' <DIM> ']' 
                    Return .Item(0).Data + .Item(2).Data

                Case ProductionIndex.G_Id
                    ' <G> ::= ID 
                    Return .Item(0).Data

                Case ProductionIndex.Invocar_Id_Lparen_Rparen
                    ' <INVOCAR> ::= ID '(' <PARAMETROS> ')' 
                    Return .Item(0).Data + "(" + .Item(2).Data + ")"

                Case ProductionIndex.Invocar_Id_Lparen_Rparen2
                    ' <INVOCAR> ::= ID '(' ')' 
                    Return .Item(0).Data + "(" + ")"

                Case ProductionIndex.Parametros
                    ' <PARAMETROS> ::= <L_PARAM> 
                    Return .Item(0).Data

                Case ProductionIndex.L_param
                    ' <L_PARAM> ::= <LOGICO> 
                    Return .Item(0).Data

                Case ProductionIndex.L_param2
                    ' <L_PARAM> ::= <OP> 
                    Return .Item(0).Data

                Case ProductionIndex.L_param3
                    ' <L_PARAM> ::= <LOGICO> <SEC> 
                    Return .Item(0).Data + .Item(1).Data

                Case ProductionIndex.L_param4
                    ' <L_PARAM> ::= <OP> <SEC> 
                    Return .Item(0).Data + .Item(1).Data

                Case ProductionIndex.Sec_Comma
                    ' <SEC> ::= <SEC> ',' <LOGICO> 
                    Return .Item(0).Data + "," + .Item(1).Data

                Case ProductionIndex.Sec_Comma2
                    ' <SEC> ::= <SEC> ',' <OP> 
                    Return .Item(0).Data + "," + .Item(1).Data

                Case ProductionIndex.Sec_Comma3
                    ' <SEC> ::= ',' <OP> 
                    Return "," + .Item(1).Data

                Case ProductionIndex.Sec_Comma4
                    ' <SEC> ::= ',' <LOGICO> 
                    Return "," + .Item(1).Data

                Case ProductionIndex.Logico_True
                    ' <LOGICO> ::= True 
                    Return "true"

                Case ProductionIndex.Logico_False
                    ' <LOGICO> ::= False 
                    Return "false"

                Case ProductionIndex.Acceso_Public
                    ' <ACCESO> ::= Public 
                    Return "public"

                Case ProductionIndex.Acceso_Private
                    ' <ACCESO> ::= Private 
                    Return "private"

                Case ProductionIndex.Acceso_Dim
                    ' <ACCESO> ::= Dim 
                    Return ""

                Case ProductionIndex.Acceso_Static
                    ' <ACCESO> ::= Static 
                    Return "static"

                Case ProductionIndex.Tipod_Boolean
                    ' <TIPOD> ::= Boolean 
                    Return "boolean"

                Case ProductionIndex.Tipod_Char
                    ' <TIPOD> ::= Char 
                    Return "char"

                Case ProductionIndex.Tipod_Double
                    ' <TIPOD> ::= Double 
                    Return "double"

                Case ProductionIndex.Tipod_Integer
                    ' <TIPOD> ::= Integer 
                    Return "int"

                Case ProductionIndex.Tipod_Long
                    ' <TIPOD> ::= Long 
                    Return "long"

                Case ProductionIndex.Tipod_String
                    ' <TIPOD> ::= String 
                    Return "String"

            End Select
        End With     

        Return Result
    End Function
End Module
